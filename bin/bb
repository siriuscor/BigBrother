#!/usr/bin/env node
const program = require('commander');
const pkg = require('../package.json');
const consts = require('../lib/consts');
const fs = require('fs');
const path = require('path');
const { execSync, spawn } = require('child_process');
var axon = require('../lib/axon');
var rpc = require('axon-rpc');
const client = require('../lib/client');

program.version(pkg.version);

program
    .command('ls')
    .alias('l')
    .description('list all processes')
    .action(client.list);

program
    .command('load [file]')
    .description('load process config file, json or js')
    .action(client.load);

program
    .command('start [id_or_name]')
    .description('start process by id or name')
    .action(client.start);

program
    .command('stop [id_or_name]')
    .description('stop process by id or name')
    .action(client.stop);

program
    .command('restart [id_or_name]')
    .description('restart process by id or name')
    .action(client.restart);

program
    .command('kill')
    .description('kill BIGBRO daemon process')
    .action(client.kill);

program.command('*')
    .action(function() {
        console.log('Command not found');
    });

if (process.argv.length == 2) {
    process.argv.push('ls');
}

function pingDaemon(cb) {
    var req = axon.socket('req');
    var client = new rpc.Client(req);
    client.sock.once('reconnect attempt', function() {
        client.sock.close();
        process.nextTick(function() {
            return cb(false);
        });
    });
  
    client.sock.once('error', function(e) {
        console.error('check error', e);
        process.exit(1);
    });
  
    client.sock.once('connect', function() {
        client.sock.once('close', function() {
            return cb(true);
        });
        client.sock.close();
    });
  
    req.connect(consts.RPC_SOCK);
}

function startDaemon() {
    const out = fs.openSync(path.resolve(consts.LOG_PATH, 'bb-out.log'), 'a');
    const err = fs.openSync(path.resolve(consts.LOG_PATH, 'bb-err.log'), 'a');
    var daemon_file = path.resolve(path.dirname(module.filename), '../index.js');
    const server = spawn(process.execPath, [daemon_file], {
        detached: true,
        stdio: ['ignore', out, err]
    });
    server.unref();
}

pingDaemon((started) => {
    if (!started) {
        console.log('Big Brother is watching');
        startDaemon();
    }

    client.startClient(() => {
        program.parse(process.argv);
    });

});